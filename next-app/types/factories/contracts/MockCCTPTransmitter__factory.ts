/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockCCTPTransmitter,
  MockCCTPTransmitterInterface,
} from "../../contracts/MockCCTPTransmitter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "sourceDomain",
        type: "uint32",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "destinationDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "messageBody",
        type: "bytes",
      },
    ],
    name: "transmitMessage",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101818061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063393ff6841461003b5780637227b58414610072575b600080fd5b61005561004936600461009f565b6201e240949350505050565b60405167ffffffffffffffff909116815260200160405180910390f35b610055610080366004610129565b50600190565b803563ffffffff8116811461009a57600080fd5b919050565b600080600080606085870312156100b557600080fd5b6100be85610086565b935060208501359250604085013567ffffffffffffffff8111156100e157600080fd5b8501601f810187136100f257600080fd5b803567ffffffffffffffff81111561010957600080fd5b87602082840101111561011b57600080fd5b949793965060200194505050565b60006020828403121561013b57600080fd5b61014482610086565b939250505056fea2646970667358221220002e2ef55a7764fa8b8829a3e481d165345d91a05b5ea0997957e29c5b5f195b64736f6c634300081c0033";

type MockCCTPTransmitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCCTPTransmitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCCTPTransmitter__factory extends ContractFactory {
  constructor(...args: MockCCTPTransmitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockCCTPTransmitter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockCCTPTransmitter__factory {
    return super.connect(runner) as MockCCTPTransmitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCCTPTransmitterInterface {
    return new Interface(_abi) as MockCCTPTransmitterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockCCTPTransmitter {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockCCTPTransmitter;
  }
}
