/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface SelfVerificationRootInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConfigId"
      | "onVerificationSuccess"
      | "scope"
      | "verifySelfProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ScopeUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getConfigId",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onVerificationSuccess",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "scope", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySelfProof",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConfigId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVerificationSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySelfProof",
    data: BytesLike
  ): Result;
}

export namespace ScopeUpdatedEvent {
  export type InputTuple = [newScope: BigNumberish];
  export type OutputTuple = [newScope: bigint];
  export interface OutputObject {
    newScope: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SelfVerificationRoot extends BaseContract {
  connect(runner?: ContractRunner | null): SelfVerificationRoot;
  waitForDeployment(): Promise<this>;

  interface: SelfVerificationRootInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConfigId: TypedContractMethod<
    [
      destinationChainId: BytesLike,
      userIdentifier: BytesLike,
      userDefinedData: BytesLike
    ],
    [string],
    "view"
  >;

  onVerificationSuccess: TypedContractMethod<
    [output: BytesLike, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  scope: TypedContractMethod<[], [bigint], "view">;

  verifySelfProof: TypedContractMethod<
    [proofPayload: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConfigId"
  ): TypedContractMethod<
    [
      destinationChainId: BytesLike,
      userIdentifier: BytesLike,
      userDefinedData: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onVerificationSuccess"
  ): TypedContractMethod<
    [output: BytesLike, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scope"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifySelfProof"
  ): TypedContractMethod<
    [proofPayload: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ScopeUpdated"
  ): TypedContractEvent<
    ScopeUpdatedEvent.InputTuple,
    ScopeUpdatedEvent.OutputTuple,
    ScopeUpdatedEvent.OutputObject
  >;

  filters: {
    "ScopeUpdated(uint256)": TypedContractEvent<
      ScopeUpdatedEvent.InputTuple,
      ScopeUpdatedEvent.OutputTuple,
      ScopeUpdatedEvent.OutputObject
    >;
    ScopeUpdated: TypedContractEvent<
      ScopeUpdatedEvent.InputTuple,
      ScopeUpdatedEvent.OutputTuple,
      ScopeUpdatedEvent.OutputObject
    >;
  };
}
