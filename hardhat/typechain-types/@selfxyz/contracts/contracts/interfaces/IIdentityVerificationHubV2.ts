/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace SelfStructs {
  export type VerificationConfigV2Struct = {
    olderThanEnabled: boolean;
    olderThan: BigNumberish;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
    ofacEnabled: [boolean, boolean, boolean];
  };

  export type VerificationConfigV2StructOutput = [
    olderThanEnabled: boolean,
    olderThan: bigint,
    forbiddenCountriesEnabled: boolean,
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint],
    ofacEnabled: [boolean, boolean, boolean]
  ] & {
    olderThanEnabled: boolean;
    olderThan: bigint;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: [bigint, bigint, bigint, bigint];
    ofacEnabled: [boolean, boolean, boolean];
  };
}

export declare namespace IRegisterCircuitVerifier {
  export type RegisterCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish, BigNumberish];
  };

  export type RegisterCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint, bigint];
  };
}

export declare namespace IDscCircuitVerifier {
  export type DscCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish];
  };

  export type DscCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint];
  };
}

export interface IIdentityVerificationHubV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchUpdateDscCircuitVerifiers"
      | "batchUpdateRegisterCircuitVerifiers"
      | "discloseVerifier"
      | "dscCircuitVerifiers"
      | "generateConfigId"
      | "getIdentityCommitmentMerkleRoot"
      | "registerCircuitVerifiers"
      | "registerCommitment"
      | "registerDscKeyCommitment"
      | "registry"
      | "rootTimestamp"
      | "setVerificationConfigV2"
      | "updateDscVerifier"
      | "updateRegisterCircuitVerifier"
      | "updateRegistry"
      | "updateVcAndDiscloseCircuit"
      | "verificationConfigV2Exists"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    values: [BytesLike[], BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    values: [BytesLike[], BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "discloseVerifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dscCircuitVerifiers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateConfigId",
    values: [SelfStructs.VerificationConfigV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCircuitVerifiers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCommitment",
    values: [
      BytesLike,
      BigNumberish,
      IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [BytesLike, BigNumberish, IDscCircuitVerifier.DscCircuitProofStruct]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rootTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationConfigV2",
    values: [SelfStructs.VerificationConfigV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDscVerifier",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegisterCircuitVerifier",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVcAndDiscloseCircuit",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationConfigV2Exists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discloseVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateConfigId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationConfigV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDscVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegisterCircuitVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVcAndDiscloseCircuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationConfigV2Exists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface IIdentityVerificationHubV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IIdentityVerificationHubV2;
  waitForDeployment(): Promise<this>;

  interface: IIdentityVerificationHubV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchUpdateDscCircuitVerifiers: TypedContractMethod<
    [
      attestationIds: BytesLike[],
      typeIds: BigNumberish[],
      verifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  batchUpdateRegisterCircuitVerifiers: TypedContractMethod<
    [
      attestationIds: BytesLike[],
      typeIds: BigNumberish[],
      verifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  discloseVerifier: TypedContractMethod<
    [attestationId: BytesLike],
    [string],
    "view"
  >;

  dscCircuitVerifiers: TypedContractMethod<
    [attestationId: BytesLike, typeId: BigNumberish],
    [string],
    "view"
  >;

  generateConfigId: TypedContractMethod<
    [config: SelfStructs.VerificationConfigV2Struct],
    [string],
    "view"
  >;

  getIdentityCommitmentMerkleRoot: TypedContractMethod<
    [attestationId: BytesLike],
    [bigint],
    "view"
  >;

  registerCircuitVerifiers: TypedContractMethod<
    [attestationId: BytesLike, typeId: BigNumberish],
    [string],
    "view"
  >;

  registerCommitment: TypedContractMethod<
    [
      attestationId: BytesLike,
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registerDscKeyCommitment: TypedContractMethod<
    [
      attestationId: BytesLike,
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[attestationId: BytesLike], [string], "view">;

  rootTimestamp: TypedContractMethod<
    [attestationId: BytesLike, root: BigNumberish],
    [bigint],
    "view"
  >;

  setVerificationConfigV2: TypedContractMethod<
    [config: SelfStructs.VerificationConfigV2Struct],
    [string],
    "nonpayable"
  >;

  updateDscVerifier: TypedContractMethod<
    [
      attestationId: BytesLike,
      typeId: BigNumberish,
      verifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateRegisterCircuitVerifier: TypedContractMethod<
    [
      attestationId: BytesLike,
      typeId: BigNumberish,
      verifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateRegistry: TypedContractMethod<
    [attestationId: BytesLike, registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVcAndDiscloseCircuit: TypedContractMethod<
    [
      attestationId: BytesLike,
      vcAndDiscloseCircuitVerifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  verificationConfigV2Exists: TypedContractMethod<
    [configId: BytesLike],
    [boolean],
    "view"
  >;

  verify: TypedContractMethod<
    [baseVerificationInput: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchUpdateDscCircuitVerifiers"
  ): TypedContractMethod<
    [
      attestationIds: BytesLike[],
      typeIds: BigNumberish[],
      verifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpdateRegisterCircuitVerifiers"
  ): TypedContractMethod<
    [
      attestationIds: BytesLike[],
      typeIds: BigNumberish[],
      verifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "discloseVerifier"
  ): TypedContractMethod<[attestationId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "dscCircuitVerifiers"
  ): TypedContractMethod<
    [attestationId: BytesLike, typeId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateConfigId"
  ): TypedContractMethod<
    [config: SelfStructs.VerificationConfigV2Struct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIdentityCommitmentMerkleRoot"
  ): TypedContractMethod<[attestationId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerCircuitVerifiers"
  ): TypedContractMethod<
    [attestationId: BytesLike, typeId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerCommitment"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDscKeyCommitment"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[attestationId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "rootTimestamp"
  ): TypedContractMethod<
    [attestationId: BytesLike, root: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVerificationConfigV2"
  ): TypedContractMethod<
    [config: SelfStructs.VerificationConfigV2Struct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDscVerifier"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      typeId: BigNumberish,
      verifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRegisterCircuitVerifier"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      typeId: BigNumberish,
      verifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRegistry"
  ): TypedContractMethod<
    [attestationId: BytesLike, registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVcAndDiscloseCircuit"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      vcAndDiscloseCircuitVerifierAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verificationConfigV2Exists"
  ): TypedContractMethod<[configId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [baseVerificationInput: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
