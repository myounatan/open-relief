/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TypedMemView,
  TypedMemViewInterface,
} from "../../contracts/TypedMemView";

const _abi = [
  {
    inputs: [],
    name: "NULL",
    outputs: [
      {
        internalType: "bytes29",
        name: "",
        type: "bytes29",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6095610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b603e6057565b6040805162ffffff199092168252519081900360200190f35b62ffffff198156fea2646970667358221220e46c93ef476a79de00530f72e67cd3ebf63809c06cf4b4303ec1d729c4aed5f564736f6c63430007060033";

type TypedMemViewConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TypedMemViewConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TypedMemView__factory extends ContractFactory {
  constructor(...args: TypedMemViewConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TypedMemView & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TypedMemView__factory {
    return super.connect(runner) as TypedMemView__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TypedMemViewInterface {
    return new Interface(_abi) as TypedMemViewInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TypedMemView {
    return new Contract(address, _abi, runner) as unknown as TypedMemView;
  }
}
