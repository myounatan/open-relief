/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ReliefPools {
  export type BeneficiaryStruct = {
    nullifier: BigNumberish;
    userIdentifier: BigNumberish;
    walletAddress: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BeneficiaryStructOutput = [
    nullifier: bigint,
    userIdentifier: bigint,
    walletAddress: string,
    amount: bigint,
    timestamp: bigint
  ] & {
    nullifier: bigint;
    userIdentifier: bigint;
    walletAddress: string;
    amount: bigint;
    timestamp: bigint;
  };

  export type DonorStruct = {
    id: BigNumberish;
    walletAddress: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    isCrossChain: boolean;
    sourceDomain: BigNumberish;
    location: string;
  };

  export type DonorStructOutput = [
    id: bigint,
    walletAddress: string,
    amount: bigint,
    timestamp: bigint,
    isCrossChain: boolean,
    sourceDomain: bigint,
    location: string
  ] & {
    id: bigint;
    walletAddress: string;
    amount: bigint;
    timestamp: bigint;
    isCrossChain: boolean;
    sourceDomain: bigint;
    location: string;
  };

  export type ReliefPoolStruct = {
    id: string;
    disasterType: BigNumberish;
    classification: BigNumberish;
    nationalityRequired: string;
    allocatedFundsPerPerson: BigNumberish;
    totalBeneficiaries: BigNumberish;
    totalDonors: BigNumberish;
    totalAmountClaimed: BigNumberish;
    totalAmountDonated: BigNumberish;
    isActive: boolean;
  };

  export type ReliefPoolStructOutput = [
    id: string,
    disasterType: bigint,
    classification: bigint,
    nationalityRequired: string,
    allocatedFundsPerPerson: bigint,
    totalBeneficiaries: bigint,
    totalDonors: bigint,
    totalAmountClaimed: bigint,
    totalAmountDonated: bigint,
    isActive: boolean
  ] & {
    id: string;
    disasterType: bigint;
    classification: bigint;
    nationalityRequired: string;
    allocatedFundsPerPerson: bigint;
    totalBeneficiaries: bigint;
    totalDonors: bigint;
    totalAmountClaimed: bigint;
    totalAmountDonated: bigint;
    isActive: boolean;
  };
}

export interface ReliefPoolsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "VERIFICATION_MESSAGE_TYPEHASH"
      | "adminAddress"
      | "cctpMessageTransmitter"
      | "checkPersonClaimedFromPool"
      | "claimRelief"
      | "createReliefPool"
      | "donate"
      | "emergencyWithdraw"
      | "getAllPoolIds"
      | "getBeneficiary"
      | "getContractBalance"
      | "getDonor"
      | "getPersonClaimedPools"
      | "getPoolIdByIndex"
      | "getReliefPool"
      | "getTotalPools"
      | "handleReceiveFinalizedMessage"
      | "handleReceiveUnfinalizedMessage"
      | "hasPersonClaimedFromPool"
      | "owner"
      | "personClaimedPools"
      | "poolBeneficiaries"
      | "poolDonors"
      | "poolIds"
      | "reliefPools"
      | "renounceOwnership"
      | "setCCTPMessageTransmitter"
      | "togglePoolStatus"
      | "transferOwnership"
      | "usdcToken"
      | "verifyAdminSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DonationMade"
      | "FundsClaimed"
      | "OwnershipTransferred"
      | "PoolStatusChanged"
      | "ReliefPoolCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cctpMessageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkPersonClaimedFromPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRelief",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createReliefPool",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPoolIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonor",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersonClaimedPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolIdByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReliefPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleReceiveFinalizedMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleReceiveUnfinalizedMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPersonClaimedFromPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "personClaimedPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBeneficiaries",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolDonors",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reliefPools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCCTPMessageTransmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePoolStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyAdminSignature",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cctpMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPersonClaimedFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRelief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReliefPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPoolIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDonor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPersonClaimedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReliefPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleReceiveFinalizedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleReceiveUnfinalizedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPersonClaimedFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "personClaimedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolDonors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reliefPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCCTPMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAdminSignature",
    data: BytesLike
  ): Result;
}

export namespace DonationMadeEvent {
  export type InputTuple = [
    poolId: string,
    donor: AddressLike,
    sourceDomain: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish,
    location: string
  ];
  export type OutputTuple = [
    poolId: string,
    donor: string,
    sourceDomain: bigint,
    amount: bigint,
    timestamp: bigint,
    location: string
  ];
  export interface OutputObject {
    poolId: string;
    donor: string;
    sourceDomain: bigint;
    amount: bigint;
    timestamp: bigint;
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsClaimedEvent {
  export type InputTuple = [
    poolId: string,
    claimer: AddressLike,
    recipient: AddressLike,
    nullifier: BigNumberish,
    userIdentifier: BigNumberish,
    nationality: string,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    claimer: string,
    recipient: string,
    nullifier: bigint,
    userIdentifier: bigint,
    nationality: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    poolId: string;
    claimer: string;
    recipient: string;
    nullifier: bigint;
    userIdentifier: bigint;
    nationality: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolStatusChangedEvent {
  export type InputTuple = [poolId: string, isActive: boolean];
  export type OutputTuple = [poolId: string, isActive: boolean];
  export interface OutputObject {
    poolId: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReliefPoolCreatedEvent {
  export type InputTuple = [
    poolId: string,
    disasterType: BigNumberish,
    classification: BigNumberish,
    nationalityRequired: string,
    allocatedFundsPerPerson: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    disasterType: bigint,
    classification: bigint,
    nationalityRequired: string,
    allocatedFundsPerPerson: bigint
  ];
  export interface OutputObject {
    poolId: string;
    disasterType: bigint;
    classification: bigint;
    nationalityRequired: string;
    allocatedFundsPerPerson: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReliefPools extends BaseContract {
  connect(runner?: ContractRunner | null): ReliefPools;
  waitForDeployment(): Promise<this>;

  interface: ReliefPoolsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  VERIFICATION_MESSAGE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  adminAddress: TypedContractMethod<[], [string], "view">;

  cctpMessageTransmitter: TypedContractMethod<[], [string], "view">;

  checkPersonClaimedFromPool: TypedContractMethod<
    [poolId: string, userIdentifier: BigNumberish],
    [boolean],
    "view"
  >;

  claimRelief: TypedContractMethod<
    [
      poolId: string,
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  createReliefPool: TypedContractMethod<
    [
      poolId: string,
      disasterType: BigNumberish,
      classification: BigNumberish,
      nationalityRequired: string,
      allocatedFundsPerPerson: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [poolId: string, amount: BigNumberish, location: string],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllPoolIds: TypedContractMethod<[], [string[]], "view">;

  getBeneficiary: TypedContractMethod<
    [poolId: string, beneficiary: AddressLike],
    [ReliefPools.BeneficiaryStructOutput],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getDonor: TypedContractMethod<
    [poolId: string, donor: AddressLike],
    [ReliefPools.DonorStructOutput],
    "view"
  >;

  getPersonClaimedPools: TypedContractMethod<
    [userIdentifier: BigNumberish],
    [string[]],
    "view"
  >;

  getPoolIdByIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getReliefPool: TypedContractMethod<
    [poolId: string],
    [ReliefPools.ReliefPoolStructOutput],
    "view"
  >;

  getTotalPools: TypedContractMethod<[], [bigint], "view">;

  handleReceiveFinalizedMessage: TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      sender: BytesLike,
      finalityThresholdExecuted: BigNumberish,
      messageBody: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  handleReceiveUnfinalizedMessage: TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      sender: BytesLike,
      finalityThresholdExecuted: BigNumberish,
      messageBody: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  hasPersonClaimedFromPool: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  personClaimedPools: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  poolBeneficiaries: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint] & {
        nullifier: bigint;
        userIdentifier: bigint;
        walletAddress: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  poolDonors: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, string, bigint, bigint, boolean, bigint, string] & {
        id: bigint;
        walletAddress: string;
        amount: bigint;
        timestamp: bigint;
        isCrossChain: boolean;
        sourceDomain: bigint;
        location: string;
      }
    ],
    "view"
  >;

  poolIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  reliefPools: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        disasterType: bigint;
        classification: bigint;
        nationalityRequired: string;
        allocatedFundsPerPerson: bigint;
        totalBeneficiaries: bigint;
        totalDonors: bigint;
        totalAmountClaimed: bigint;
        totalAmountDonated: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCCTPMessageTransmitter: TypedContractMethod<
    [_cctpMessageTransmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  togglePoolStatus: TypedContractMethod<[poolId: string], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  verifyAdminSignature: TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      adminSignature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_MESSAGE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cctpMessageTransmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkPersonClaimedFromPool"
  ): TypedContractMethod<
    [poolId: string, userIdentifier: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRelief"
  ): TypedContractMethod<
    [
      poolId: string,
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReliefPool"
  ): TypedContractMethod<
    [
      poolId: string,
      disasterType: BigNumberish,
      classification: BigNumberish,
      nationalityRequired: string,
      allocatedFundsPerPerson: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [poolId: string, amount: BigNumberish, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPoolIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBeneficiary"
  ): TypedContractMethod<
    [poolId: string, beneficiary: AddressLike],
    [ReliefPools.BeneficiaryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonor"
  ): TypedContractMethod<
    [poolId: string, donor: AddressLike],
    [ReliefPools.DonorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPersonClaimedPools"
  ): TypedContractMethod<[userIdentifier: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPoolIdByIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getReliefPool"
  ): TypedContractMethod<
    [poolId: string],
    [ReliefPools.ReliefPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleReceiveFinalizedMessage"
  ): TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      sender: BytesLike,
      finalityThresholdExecuted: BigNumberish,
      messageBody: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleReceiveUnfinalizedMessage"
  ): TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      sender: BytesLike,
      finalityThresholdExecuted: BigNumberish,
      messageBody: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPersonClaimedFromPool"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "personClaimedPools"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolBeneficiaries"
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint] & {
        nullifier: bigint;
        userIdentifier: bigint;
        walletAddress: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolDonors"
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, string, bigint, bigint, boolean, bigint, string] & {
        id: bigint;
        walletAddress: string;
        amount: bigint;
        timestamp: bigint;
        isCrossChain: boolean;
        sourceDomain: bigint;
        location: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "reliefPools"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        disasterType: bigint;
        classification: bigint;
        nationalityRequired: string;
        allocatedFundsPerPerson: bigint;
        totalBeneficiaries: bigint;
        totalDonors: bigint;
        totalAmountClaimed: bigint;
        totalAmountDonated: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCCTPMessageTransmitter"
  ): TypedContractMethod<
    [_cctpMessageTransmitter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "togglePoolStatus"
  ): TypedContractMethod<[poolId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAdminSignature"
  ): TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      adminSignature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "DonationMade"
  ): TypedContractEvent<
    DonationMadeEvent.InputTuple,
    DonationMadeEvent.OutputTuple,
    DonationMadeEvent.OutputObject
  >;
  getEvent(
    key: "FundsClaimed"
  ): TypedContractEvent<
    FundsClaimedEvent.InputTuple,
    FundsClaimedEvent.OutputTuple,
    FundsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolStatusChanged"
  ): TypedContractEvent<
    PoolStatusChangedEvent.InputTuple,
    PoolStatusChangedEvent.OutputTuple,
    PoolStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReliefPoolCreated"
  ): TypedContractEvent<
    ReliefPoolCreatedEvent.InputTuple,
    ReliefPoolCreatedEvent.OutputTuple,
    ReliefPoolCreatedEvent.OutputObject
  >;

  filters: {
    "DonationMade(string,address,uint32,uint256,uint256,string)": TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
    DonationMade: TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;

    "FundsClaimed(string,address,address,uint256,uint256,string,uint256,uint256)": TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;
    FundsClaimed: TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolStatusChanged(string,bool)": TypedContractEvent<
      PoolStatusChangedEvent.InputTuple,
      PoolStatusChangedEvent.OutputTuple,
      PoolStatusChangedEvent.OutputObject
    >;
    PoolStatusChanged: TypedContractEvent<
      PoolStatusChangedEvent.InputTuple,
      PoolStatusChangedEvent.OutputTuple,
      PoolStatusChangedEvent.OutputObject
    >;

    "ReliefPoolCreated(string,uint8,uint8,string,uint256)": TypedContractEvent<
      ReliefPoolCreatedEvent.InputTuple,
      ReliefPoolCreatedEvent.OutputTuple,
      ReliefPoolCreatedEvent.OutputObject
    >;
    ReliefPoolCreated: TypedContractEvent<
      ReliefPoolCreatedEvent.InputTuple,
      ReliefPoolCreatedEvent.OutputTuple,
      ReliefPoolCreatedEvent.OutputObject
    >;
  };
}
