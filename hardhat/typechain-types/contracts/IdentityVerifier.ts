/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IdentityVerifier {
  export type VerificationDataStruct = {
    nullifier: BigNumberish;
    userIdentifier: BigNumberish;
    nationality: string;
    timestamp: BigNumberish;
    isVerified: boolean;
  };

  export type VerificationDataStructOutput = [
    nullifier: bigint,
    userIdentifier: bigint,
    nationality: string,
    timestamp: bigint,
    isVerified: boolean
  ] & {
    nullifier: bigint;
    userIdentifier: bigint;
    nationality: string;
    timestamp: bigint;
    isVerified: boolean;
  };
}

export interface IdentityVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERIFICATION_MESSAGE_TYPEHASH"
      | "adminAddress"
      | "adminSignatures"
      | "configId"
      | "getAdminSignature"
      | "getConfigId()"
      | "getConfigId(bytes32,bytes32,bytes)"
      | "getMessageHash"
      | "getMessageHashToSign"
      | "getVerificationData"
      | "getVerifiedUserAddress"
      | "isUserVerified"
      | "messageHashes"
      | "onVerificationSuccess"
      | "owner"
      | "reliefPoolsContract"
      | "renounceOwnership"
      | "scope"
      | "setAdminSignature"
      | "setReliefPoolsContract"
      | "setScope"
      | "transferOwnership"
      | "userIdentifierToAddress"
      | "verifiedUsers"
      | "verifyAdminSignature"
      | "verifySelfProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSignatureGenerated"
      | "OwnershipTransferred"
      | "ScopeUpdated"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "VERIFICATION_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "configId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAdminSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigId(bytes32,bytes32,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHashToSign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedUserAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onVerificationSuccess",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reliefPoolsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scope", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdminSignature",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReliefPoolsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setScope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userIdentifierToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAdminSignature",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySelfProof",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "VERIFICATION_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigId(bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHashToSign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVerificationSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reliefPoolsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdminSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReliefPoolsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setScope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIdentifierToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAdminSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySelfProof",
    data: BytesLike
  ): Result;
}

export namespace AdminSignatureGeneratedEvent {
  export type InputTuple = [
    nullifier: BigNumberish,
    signature: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    nullifier: bigint,
    signature: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    nullifier: bigint;
    signature: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeUpdatedEvent {
  export type InputTuple = [newScope: BigNumberish];
  export type OutputTuple = [newScope: bigint];
  export interface OutputObject {
    newScope: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [
    nullifier: BigNumberish,
    userIdentifier: BigNumberish,
    nationality: string,
    userAddress: AddressLike,
    reliefPoolId: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    nullifier: bigint,
    userIdentifier: bigint,
    nationality: string,
    userAddress: string,
    reliefPoolId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    nullifier: bigint;
    userIdentifier: bigint;
    nationality: string;
    userAddress: string;
    reliefPoolId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdentityVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityVerifier;
  waitForDeployment(): Promise<this>;

  interface: IdentityVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERIFICATION_MESSAGE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  adminAddress: TypedContractMethod<[], [string], "view">;

  adminSignatures: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  configId: TypedContractMethod<[], [string], "view">;

  getAdminSignature: TypedContractMethod<
    [nullifier: BigNumberish],
    [string],
    "view"
  >;

  "getConfigId()": TypedContractMethod<[], [string], "view">;

  "getConfigId(bytes32,bytes32,bytes)": TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike, arg2: BytesLike],
    [string],
    "view"
  >;

  getMessageHash: TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish
    ],
    [string],
    "view"
  >;

  getMessageHashToSign: TypedContractMethod<
    [nullifier: BigNumberish],
    [string],
    "view"
  >;

  getVerificationData: TypedContractMethod<
    [nullifier: BigNumberish],
    [IdentityVerifier.VerificationDataStructOutput],
    "view"
  >;

  getVerifiedUserAddress: TypedContractMethod<
    [nullifier: BigNumberish],
    [string],
    "view"
  >;

  isUserVerified: TypedContractMethod<
    [nullifier: BigNumberish],
    [boolean],
    "view"
  >;

  messageHashes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  onVerificationSuccess: TypedContractMethod<
    [output: BytesLike, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  reliefPoolsContract: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scope: TypedContractMethod<[], [bigint], "view">;

  setAdminSignature: TypedContractMethod<
    [nullifier: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  setReliefPoolsContract: TypedContractMethod<
    [_reliefPoolsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setScope: TypedContractMethod<[_scope: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userIdentifierToAddress: TypedContractMethod<
    [userIdentifier: BigNumberish],
    [string],
    "view"
  >;

  verifiedUsers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean] & {
        nullifier: bigint;
        userIdentifier: bigint;
        nationality: string;
        timestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  verifyAdminSignature: TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  verifySelfProof: TypedContractMethod<
    [proofPayload: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERIFICATION_MESSAGE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminSignatures"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "configId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAdminSignature"
  ): TypedContractMethod<[nullifier: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getConfigId()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getConfigId(bytes32,bytes32,bytes)"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike, arg2: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessageHash"
  ): TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessageHashToSign"
  ): TypedContractMethod<[nullifier: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVerificationData"
  ): TypedContractMethod<
    [nullifier: BigNumberish],
    [IdentityVerifier.VerificationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVerifiedUserAddress"
  ): TypedContractMethod<[nullifier: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isUserVerified"
  ): TypedContractMethod<[nullifier: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageHashes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "onVerificationSuccess"
  ): TypedContractMethod<
    [output: BytesLike, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reliefPoolsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scope"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAdminSignature"
  ): TypedContractMethod<
    [nullifier: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReliefPoolsContract"
  ): TypedContractMethod<
    [_reliefPoolsContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setScope"
  ): TypedContractMethod<[_scope: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userIdentifierToAddress"
  ): TypedContractMethod<[userIdentifier: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedUsers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean] & {
        nullifier: bigint;
        userIdentifier: bigint;
        nationality: string;
        timestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyAdminSignature"
  ): TypedContractMethod<
    [
      nullifier: BigNumberish,
      userIdentifier: BigNumberish,
      nationality: string,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifySelfProof"
  ): TypedContractMethod<
    [proofPayload: BytesLike, userContextData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminSignatureGenerated"
  ): TypedContractEvent<
    AdminSignatureGeneratedEvent.InputTuple,
    AdminSignatureGeneratedEvent.OutputTuple,
    AdminSignatureGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ScopeUpdated"
  ): TypedContractEvent<
    ScopeUpdatedEvent.InputTuple,
    ScopeUpdatedEvent.OutputTuple,
    ScopeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "AdminSignatureGenerated(uint256,bytes,uint256)": TypedContractEvent<
      AdminSignatureGeneratedEvent.InputTuple,
      AdminSignatureGeneratedEvent.OutputTuple,
      AdminSignatureGeneratedEvent.OutputObject
    >;
    AdminSignatureGenerated: TypedContractEvent<
      AdminSignatureGeneratedEvent.InputTuple,
      AdminSignatureGeneratedEvent.OutputTuple,
      AdminSignatureGeneratedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ScopeUpdated(uint256)": TypedContractEvent<
      ScopeUpdatedEvent.InputTuple,
      ScopeUpdatedEvent.OutputTuple,
      ScopeUpdatedEvent.OutputObject
    >;
    ScopeUpdated: TypedContractEvent<
      ScopeUpdatedEvent.InputTuple,
      ScopeUpdatedEvent.OutputTuple,
      ScopeUpdatedEvent.OutputObject
    >;

    "UserVerified(uint256,uint256,string,address,string,uint256)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
